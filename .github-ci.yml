variables:
  GIT_STRATEGY: fetch
  IMAGE_NAME: $REGISTRY_HOST/$REGISTRY_GROUP/$CI_PROJECT_NAME  
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

services:
  - name: $REGISTRY_HOST/$REGISTRY_GROUP/docker:20.10.16-dind
    alias: docker

################################################################################
## 以上为gitlab ci 公共配置信息，在code.mlamp.cn/ss/下所有项目可不做修改，直接使用
################################################################################



################################################################################
## 构建阶段将酌情统一约束
################################################################################
stages:
  - test
  - release
  - build
  - deploy
  - notices


################################################################################
## test 阶段1
## sonarqube 检查
################################################################################
# sonarqube-check:
#   stage: test
#   variables: 
#   #   SONAR_TOKEN: "your-sonarqube-token"
#   #   SONAR_HOST_URL: "http://your-sonarqube-instance.org"
#     GIT_DEPTH: 0
#   tags:
#     - k8s-runner
#   image:
#     name: $REGISTRY_HOST/$REGISTRY_GROUP/sonar-scanner-cli:latest
#     entrypoint: [""]
#   script:
#     - sonar-scanner 
#       -Dsonar.qualitygate.wait=true 
#       -Dsonar.sourceEncoding=UTF-8 
#       -Dsonar.gitlab.commit_sha=${CI_BUILD_REF} 
#       -Dsonar.gitlab.ref_name=${CI_BUILD_REF_NAME} 
#       -Dsonar.gitlab.url=${GITLAB_URL} 
#       -Dsonar.gitlab.user_token=${GITLAB_TOKEN} 
#       -Dsonar.gitlab.api_version=v4
#       -Dsonar.projectKey=${CI_PROJECT_NAME}
#   allow_failure: true
#   only:
#     - merge_requests
#     - master
#     # - beta
#     # - alpha
#     # - tags


################################################################################
## test 阶段2
## 单元测试 检查
################################################################################
unit-testing:
  stage: test
  tags:
    - k8s-runner
  image: $REGISTRY_HOST/$REGISTRY_GROUP/gradle:alpine
  script: echo "unit-testing ..."
  allow_failure: true
  only:
    - merge_requests
    - master
    - beta
    - alpha
    # - tags

################################################################################
## 使用 semantic-release 自动发布git版本
################################################################################
release:
  stage: release
  tags:
    - k8s-runner
  image: $REGISTRY_HOST/$REGISTRY_GROUP/semantic-release:2.0
  script:
    - semantic-release
  dependencies: []
  only:
    - master
    - beta
    - alpha
    - next


################################################################################
## 统一构建docker镜像，并推送到仓库，请根据项目需要修改Dockerfile
################################################################################
build:
  stage: build
  services:
    - name: $REGISTRY_HOST/$REGISTRY_GROUP/docker:20.10.16-dind
      alias: docker
  tags:
    - k8s-runner
  # docker/Dockerfile.base
  image: $REGISTRY_HOST/$REGISTRY_GROUP/node:16-alpine
  cache:
  - key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - .yarn-cache/
  only:
    - tags
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories
    - apk add docker-cli --no-cache
    - docker ps
    - echo $REGISTRY_HOST
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY_HOST
    # 加速下载
    - docker pull $REGISTRY_HOST/$REGISTRY_GROUP/node:16-alpine
    - docker pull $REGISTRY_HOST/$REGISTRY_GROUP/nginx:1.23.0-debian-11-r5
    - docker tag $REGISTRY_HOST/$REGISTRY_GROUP/node:16-alpine node:16-alpine
    - docker tag $REGISTRY_HOST/$REGISTRY_GROUP/nginx:1.23.0-debian-11-r5 bitnami/nginx:1.23.0-debian-11-r5
  script:
    - if [ ! -d "./node_modules" ]; then yarn --cache-folder .yarn-cache; fi
    - yarn build
    # - test 真实有编译去掉
    # - mkdir -p ./dist && echo "oh" > ./dist/index.html
    - docker build -t $IMAGE_NAME:$CI_COMMIT_REF_NAME --build-arg DIST_FILE=dist -f docker/Dockerfile . 
    - docker images
    - docker push "$IMAGE_NAME:$CI_COMMIT_REF_NAME"
    - echo "Build images success:[$IMAGE_NAME:$CI_COMMIT_REF_NAME]"


################################################################################
## 构建镜像后更新环境，例如自动更新dev环境 目前暂时人工升级
################################################################################
deploy_cd:
  image:
    # name: bitnami/argo-cd:2.4.3
    name: $REGISTRY_HOST/$REGISTRY_GROUP/argo-cd:2.4.3
    entrypoint: ['']
  stage: deploy
  tags:
    - k8s-runner
  only:
    - tags
  script:
    - echo "Deploying [${CI_PROJECT_NAME}] to dev environment using argo [${ARGO_SERVER}]..."
    - argocd app set ${ARGO_APP_DEV} -p ${CI_PROJECT_NAME}.image.tag=${CI_COMMIT_REF_NAME} --server ${ARGO_SERVER}  --auth-token ${ARGO_TOKEN}
    - argocd app get ${ARGO_APP_DEV} --show-params --server ${ARGO_SERVER} --auth-token ${ARGO_TOKEN}


################################################################################
## 构建镜像后通知任务结果，可以在项目CI/CD中自定义WAECHAT_GROUP_BOT_KEY variable
## 通知到指定的群组,也可以增加其他通知方案
################################################################################
deploy_notices:
  tags:
    - k8s-runner
  image:
    name: $REGISTRY_HOST/$REGISTRY_GROUP/curl
  stage: notices
  only:
    - tags
  script:
    - |
      export msg="{\"msgtype\":\"markdown\",\"markdown\":{\"content\":\"新版本发布通知\n >仓库地址: [${CI_PROJECT_URL}](${CI_PROJECT_URL})\n >版本: ${CI_COMMIT_REF_NAME}\n >镜像地址: $IMAGE_NAME:${CI_COMMIT_REF_NAME}\n >构建详情: [${CI_PROJECT_URL}/-/pipelines/${CI_PIPELINE_ID}](${CI_PROJECT_URL}/-/pipelines/${CI_PIPELINE_ID})\n >dev环境地址:[${DEV_BASE_URL}/ci/](${DEV_BASE_URL}/ci/) \"}}";
      curl -sSL "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WAECHAT_GROUP_BOT_KEY}" -H "Content-Type: application/json" -d"${msg}"
